{"doc_id": "1517", "name": "2012_01_humanities_student_major_135_programming", "namespace": "we1sv2.0", "metapath": "", "pub": "programming", "title": "2012-01-humanities-student-major_135_programming.txt", "pub_date": "2012-01-04T00:00:00Z", "Sentiment": "-0.025", "Subjectivity": "0.266", "Score": "35", "Upvotes": "35", "Downvotes": "0", "Wordcount": "854", "Permalink": "None", "Threadlink": "None", "Parent_id": "t1_c3e0g2q", "Reddit_id": "c3e1zy6", "Subreddit_id": "t5_2fwo", "Commenter": "fssgf", "length": "4413", "content_scrubbed": "I copied them to help you out. I might format this better later and include the examples ... right now, I'm tired as hell.\n\n*Double Squares*:\n\nA double-square number is an integer X which can be expressed as the sum of two perfect squares. For example, 10 is a double-square because 10 = 32 + 12. Your task in this problem is, given X, determine the number of ways in which it can be written as the sum of two squares. For example, 10 can only be written as 32 + 12 (we don't count 12 + 32 as being different). On the other hand, 25 can be written as 52 + 02 or as 42 + 32.\n\nInput\nYou should first read an integer N, the number of test cases. The next N lines will contain N values of X.\nConstraints\n0 \u2264 X \u2264 2147483647\n1 \u2264 N \u2264 100\nOutput\nFor each value of X, you should output the number of ways to write X as the sum of two squares.\n\n*Peg game*:\n\nAt the arcade, you can play a simple game where a ball is dropped into the top of the game, from a position of your choosing. There are a number of pegs that the ball will bounce off of as it drops through the game. Whenever the ball hits a peg, it will bounce to the_left with probability 0. 5 and to the_right with probability 0. 5. The one exception to this is when it hits a peg on the far left or right side, in which case it always bounces towards the middle.\n\nWhen the game was first made, the pegs where arranged in a regular grid. However, it[.] an old game, and now some of the pegs are missing. Your goal in the game is to get the ball to fall out of the bottom of the game in a specific location. Your task is, given the arrangement of the game, to determine the optimal place to drop the ball, such that the probability of getting it to this specific location is maximized.\n\nThe image below shows an example of a game with five rows of five columns. Notice that the top row has five pegs, the next row has four pegs, the next five, and so on. With five columns, there are four choices to drop the ball into (indexed from 0). Note that in this example, there are three pegs missing. The top row is row 0, and the_leftmost peg is column 0, so the coordinates of the missing pegs are (1,1), (2,1) and (3,2). In this example, the best place to drop the ball is on the far left, in column 0, which gives a 50% chance that it will end in the goal.\nx. x. x. x. x\n x... x. x\nx... x. x. x\n x. x... x\nx. x. x. x. x\n G  \n\n'x' indicates a peg, '.' indicates empty space.\nInput\nYou should first read an integer N, the number of test cases. Each of the next N lines will then contain a single test case. Each test case will start with integers R and C, the number of rows and columns (R will be odd). Next, an integer K will specify the target column. Finally, an integer M will be followed by M pairs of integer ri and ci, giving the locations of the missing pegs.\nConstraints\n1 \u2264 N \u2264 100\n3 \u2264 R,C \u2264 100\nThe top and bottom rows will not have any missing pegs.\nOther parameters will all be valid, given R and C\nOutput\nFor each test case, you should output an integer, the location to drop the ball into, followed by the probability that the ball will end in columns K, formatted with exactly six digits after the decimal point (round the last digit, don't truncate).\nNotes\nThe input will be designed such that minor rounding errors will not impact the output (i. e. there will be no ties or near -- up to 1E-9 -- ties, and the direction of rounding for the output will not be impacted by small errors).\n\n*Studious Student*:\n\nYou've been given a list of words to study and memorize. Being a diligent student of language and the arts, you've decided to not study them at all and instead make up pointless games based on them. One game you've come up with is to see how you can concatenate the words to generate the lexicographically lowest possible string. \n\nInput\nAs input for playing this game you will receive a text file containing an integer N, the number of word sets you need to play your game against. This will be followed by N word sets, each starting with an integer M, the number of words in the set, followed by M words. All tokens in the input will be separated by some whitespace and, aside from N and M, will consist entirely of lowercase letters. \n\nOutput\nYour submission should contain the lexicographically shortest strings for each corresponding word set, one per line and in order. \n\nConstraints\n1 <= N <= 100\n1 <= M <= 9\n1 <= all word lengths <= 10"}